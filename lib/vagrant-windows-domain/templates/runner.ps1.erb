function Test-PartOfDomain($computerName, $domain){
	$computerSystem = gwmi win32_computersystem
	return ($computerSystem.Name -eq $computerName) -and ($computerSystem.PartOfDomain) -and ($computerSystem.Domain -eq $domain) 
}

function Test-JoinedToADomain(){
	$computerSystem = gwmi win32_computersystem
	return $computerSystem.PartOfDomain
}

function Remove-ADComputerFromDomain($computerName, $username, $password){
	$securePassword = convertto-securestring -string $password -AsPlainText -Force
	$credentials = new-object -typename System.Management.Automation.PSCredential -argumentlist "$domain\$username",$securePassword

	$job = Start-Job -Credential $credentials -ScriptBlock {
		$ADSISearcher = New-Object System.DirectoryServices.DirectorySearcher
		$ADSISearcher.Filter = '(&(name=' + $args[0] + ')(objectClass=computer))'
		$ADSISearcher.SearchScope = 'Subtree';
		$computer = $ADSISearcher.FindOne();
		if ($computer){
			$directoryEntry = $computer.GetDirectoryEntry()
			if ($directoryEntry){
				Write-Host "Computer with name $($args[0]) exists in AD, so removing it"
				$directoryEntry.DeleteTree()
			}
		}
	} -ArgumentList $computerName

	Wait-Job $job
	Receive-Job $job
}

function Repair-OpenSSHPasswd(){
	$passwdPath = 'C:\Program Files\OpenSSH\etc\passwd'
	$mkpasswdPath = 'C:\Program Files\OpenSSH\bin\mkpasswd.exe'
	if ((Test-Path $passwdPath) -and (Test-Path $mkpasswdPath)){
		$passwd = &$mkpasswdPath
		$passwd = $passwd -replace '^([^+]*\+)', ''
		$passwd | Set-Content $passwdPath -Encoding Ascii
	}
}

$computerName='<%= options[:computer_name] %>'
<% if options[:username] != nil && options[:unsecure] != true %>
$domain='<%= options[:domain] %>'
$username='<%= options[:username] %>'
$password='<%= options[:password] %>'
$secpasswd = ConvertTo-SecureString $password -AsPlainText -Force
$credentials = New-Object System.Management.Automation.PSCredential ($username, $secpasswd)
<% end %>
<% if options[:add_to_domain] === true %>
if (Test-PartOfDomain -computerName $computerName -domain $domain){
	throw "$computerName already part of domain $domain"
} else {

	try{
		#Add computer to domain and rename if necessary
		Add-Computer <%= options[:add_parameters] %> -Verbose -Force -PassThru
	} catch {
		#This situation occurs when someone shuts down computer and deletes it, without removing it from domain. Then spins up an instance with the same name.
		#Once we are part of domain we can remove the machine name that we want to use
		Remove-ADComputerFromDomain -computerName $computerName -username $username -password $password
		Remove-Computer <%= options[:leave_parameters] %> -Workgroup 'WORKGROUP' -Verbose -Force -PassThru

		Add-Computer <%= options[:add_parameters] %> -Verbose -Force -PassThru
	}
	Repair-OpenSSHPasswd

	# Fix vagrant-windows GH-129, if there's an existing scheduled
	# reboot cancel it so shutdown succeeds
	&shutdown /a

		# Force restart of the machine if vagrant fails at later stage as machine is unreachable now
	&shutdown /r /t 30 /c "Vagrant Halt" /f /d p:4:1
}
<% else %>
if (!(Test-JoinedToADomain)) {
	Throw "$computerName not part of any domain"
} else {
	Remove-Computer <%= options[:leave_parameters] %> -Workgroup 'WORKGROUP' -Verbose -Force -PassThru
	Repair-OpenSSHPasswd

	# Fix vagrant-windows GH-129, if there's an existing scheduled
	# reboot cancel it so shutdown succeeds
	&shutdown /a

	# Force restart of the machine if vagrant fails at later stage as machine is unreachable now
	&shutdown /r /t 30 /c "Vagrant Halt" /f /d p:4:1
}
<% end %>